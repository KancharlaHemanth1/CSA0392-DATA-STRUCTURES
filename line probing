#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

struct HashTable {
    int *array;
    int size;
};

struct HashTable *createHashTable(int size) {
    struct HashTable *table = (struct HashTable *)malloc(sizeof(struct HashTable));
    table->size = size;
    table->array = (int *)malloc(sizeof(int) * size);

    for (int i = 0; i < size; i++) {
        table->array[i] = -1;  // Initialize all slots as empty (-1)
    }

    return table;
}

int hash(int key, int size) {
    return key % size;
}

void insert(struct HashTable *table, int key) {
    int index = hash(key, table->size);

    while (table->array[index] != -1) {
        // Linear probing: Keep searching for the next available slot
        index = (index + 1) % table->size;
    }

    table->array[index] = key;
}

void display(struct HashTable *table) {
    printf("Hash Table:\n");
    for (int i = 0; i < table->size; i++) {
        if (table->array[i] != -1) {
            printf("Index %d: %d\n", i, table->array[i]);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

int main() {
    struct HashTable *table = createHashTable(SIZE);

    insert(table, 12);
    insert(table, 5);
    insert(table, 23);
    insert(table, 45);
    insert(table, 32);

    display(table);

    free(table->array);
    free(table);

    return 0;
}
